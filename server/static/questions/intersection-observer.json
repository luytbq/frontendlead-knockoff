{
    "type": "vanilla",
    "id": "intersection-observer",
    "title": "18. Intersection Observer",
    "difficulty": [
        "Medium"
    ],
    "link": "intersection-observer",
    "problemStatement": "\u003cp\u003eYou are tasked with implementing an \u003cstrong\u003eIntersection Observer\u003c/strong\u003e, a utility commonly used in frontend development to detect when an element enters or exits the viewport. Your goal is to create a class that can observe multiple elements on a webpage and trigger a callback function when these elements intersect or stop intersecting with the viewport.\u003c/p\u003e\n\u003cp\u003eThe Intersection Observer you will create should be capable of handling multiple elements simultaneously, monitoring their presence within the viewport. This feature is crucial for implementing lazy loading of images, infinite scrolling, and animations based on scroll position, enhancing user experience and performance.\u003c/p\u003e\n\u003cp\u003eTo illustrate, consider a webpage with multiple sections that become visible only as the user scrolls. Your Intersection Observer should be able to detect when each section comes into view and trigger a specified callback function, allowing for dynamic content loading or animations.\u003c/p\u003e\n\u003cp\u003eHere is a basic example of how your Intersection Observer might be initialized and used:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst observer = new MyIntersectionObserver((entries) =\u0026gt; {\r\n  entries.forEach(entry =\u0026gt; {\r\n    if (entry.isIntersecting) {\r\n      console.log(entry.target, 'has entered the viewport');\r\n    } else {\r\n      console.log(entry.target, 'has exited the viewport');\r\n    }\r\n  });\r\n});\r\n\r\n// Assuming `section1` and `section2` are DOM elements you wish to observe\r\nobserver.observe(section1);\r\nobserver.observe(section2);\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis implementation should efficiently manage and track the elements, ensuring that the callback function is invoked appropriately as elements enter and leave the viewport. Consider the implications of scroll events, element visibility, and the efficient use of resources in your solution.\u003c/p\u003e\n",
    "premiumQuestion": true,
    "testCases": [],
    "examples": [],
    "constraints": [
        {
            "constraint": "The Intersection Observer must accurately detect when observed elements enter and exit the viewport."
        },
        {
            "constraint": "The observer should handle multiple elements simultaneously without significant performance degradation."
        },
        {
            "constraint": "The callback function should receive an array of entries, each representing the state of an observed element, including its visibility and reference to the element itself."
        },
        {
            "constraint": "Changes in the visibility of observed elements must trigger the callback function with updated entry information."
        },
        {
            "constraint": "The observer must not modify the observed elements or interfere with the rest of the webpage's functionality."
        },
        {
            "constraint": "The implementation should be efficient in terms of event listening and resource usage, avoiding unnecessary checks or reflows/repaints where possible."
        },
        {
            "constraint": "The observer should work in modern web browsers without requiring any external libraries."
        }
    ],
    "order": null,
    "starterJSCode": "class MyIntersectionObserver {\r\n    constructor(callbackFn) {\r\n        // Write your code here\r\n    }\r\n    \r\n    observe(element) {\r\n        // Write your code here\r\n    }\r\n}\r\n\r\n// // You can visually test your code in the output by commenting this back in\r\n// const myObserver = new MyIntersectionObserver(entries =\u003e {\r\n//   entries.forEach(entry =\u003e {\r\n//     // Update the visibility of observed elements based on intersection status\r\n//     if (entry.isIntersecting) {\r\n//       entry.target.classList.add('show');\r\n//     } else {\r\n//       entry.target.classList.remove('show');\r\n//     }\r\n//   })\r\n// });\r\n\r\n// // Observe all \u003cp\u003e elements on the page\r\n// document.querySelectorAll('p').forEach(element =\u003e {\r\n//   myObserver.observe(element);\r\n// });\r\n\r\n// Do not edit below this line\r\nexport default MyIntersectionObserver;",
    "starterHTMLCode": "\u003cdiv id=\"container\"\u003e\r\n  \u003cdiv class=\"section\"\u003e\r\n    \u003cp\u003eSection 1\u003c/p\u003e\r\n  \u003c/div\u003e\r\n  \u003cdiv class=\"section\"\u003e\r\n    \u003cp\u003eSection 2\u003c/p\u003e\r\n  \u003c/div\u003e\r\n  \u003cdiv class=\"section\"\u003e\r\n    \u003cp\u003eSection 3\u003c/p\u003e\r\n  \u003c/div\u003e\r\n  \u003cdiv class=\"section\"\u003e\r\n    \u003cp\u003eSection 4\u003c/p\u003e\r\n  \u003c/div\u003e\r\n  \u003cdiv class=\"section\"\u003e\r\n    \u003cp\u003eSection 5\u003c/p\u003e\r\n  \u003c/div\u003e\r\n  \u003cdiv class=\"section\"\u003e\r\n    \u003cp\u003eSection 6\u003c/p\u003e\r\n  \u003c/div\u003e\r\n  \u003cdiv class=\"section\"\u003e\r\n    \u003cp\u003eSection 7\u003c/p\u003e\r\n  \u003c/div\u003e\r\n  \u003cdiv class=\"section\"\u003e\r\n    \u003cp\u003eSection 8\u003c/p\u003e\r\n  \u003c/div\u003e\r\n  \u003cdiv class=\"section\"\u003e\r\n    \u003cp\u003eSection 9\u003c/p\u003e\r\n  \u003c/div\u003e\r\n  \u003cdiv class=\"section\"\u003e\r\n    \u003cp\u003eSection 10\u003c/p\u003e\r\n  \u003c/div\u003e\r\n\u003c/div\u003e",
    "starterCSSCode": "* { margin: 0; padding: 0; font-size: 40px; font-family: Helvetica;  }\r\n#container { width: 100%; overflow: hidden; text-align: center;}\r\n\r\n.section:nth-child(1) { background: aqua; }\r\n.section:nth-child(2) { background: lime; }\r\n.section:nth-child(3) { background: tan; }\r\n\r\n.section { width: 100%; height: 180px; position: relative; animation: gradient 15s ease infinite; }\r\np {\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 90%;\r\n  opacity: 0;\r\n  transition: 1s all;\r\n  transform: translate(-50%, -50%);\r\n}\r\n.show {\r\n  top: 50%;\r\n  opacity: 1;\r\n}",
    "solutionCode": "// Class definition for MyIntersectionObserver\r\nclass MyIntersectionObserver {\r\n  constructor(callbackFn) {\r\n    // Array to store observed elements and their details\r\n    this.entries = [];\r\n\r\n    // Function to check if an element is intersecting with the viewport\r\n    this.isIntersecting = (entry) =\u003e {\r\n      // Get the current scroll position and viewport dimensions\r\n      const scrollTopPosition = window.scrollY;\r\n      const windowHeight = window.innerHeight;\r\n      const windowBottomScrollPosition = scrollTopPosition + windowHeight;\r\n      \r\n      // Check if the element is within the viewport bounds\r\n      return windowBottomScrollPosition \u003e entry.topOffset \u0026\u0026 scrollTopPosition \u003c entry.bottomOffset;\r\n    }\r\n    \r\n    // Function to handle scroll events and trigger the callback function\r\n    this.handleScroll = (e) =\u003e {\r\n      // Early exit if there are no elements to observe\r\n      if (!this.entries.length) return;\r\n      \r\n      // Iterate through each observed element\r\n      this.entries.forEach((entry, idx) =\u003e {\r\n        // Determine if the element is currently intersecting with the viewport\r\n        const isCurrentlyIntersecting = this.isIntersecting(entry);\r\n\r\n        // Trigger the callback if the intersection state has changed\r\n        if (isCurrentlyIntersecting !== this.entries[idx].isIntersecting) {\r\n          this.entries[idx].isIntersecting = isCurrentlyIntersecting;\r\n          callbackFn(this.entries);\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Register the scroll event listener to detect when elements enter or leave the viewport\r\n    window.addEventListener('scroll', this.handleScroll);  \r\n  }\r\n  \r\n  // Method to add an element to the list of observed elements\r\n  observe(element) {\r\n    // Construct an entry for the new element, including its position and initial intersection state\r\n    this.entries.push({\r\n      element: element,\r\n      topOffset: element.getBoundingClientRect().top + window.scrollY, // Adjust for current scroll position\r\n      bottomOffset: element.getBoundingClientRect().bottom + window.scrollY, // Adjust for current scroll position\r\n      target: element,\r\n      isIntersecting: false // Initial state is not intersecting\r\n    });\r\n    \r\n    // Immediately check if the new element is intersecting\r\n    this.handleScroll();\r\n  }\r\n}",
    "starterFunctionName": null,
    "solution": "\u003carticle\u003e\n\u003csection\u003e\n\u003ch1\u003eImplementing an Intersection Observer in JavaScript\u003c/h1\u003e\n\u003cp\u003eThe Intersection Observer API provides a powerful way to asynchronously observe changes in the intersection of a target element with an ancestor element or with the top-level document\u0026#8217;s viewport. In this article, we delve into a custom implementation of an Intersection Observer to understand its workings and applications in modern web development.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eUnderstanding the Basics\u003c/h2\u003e\n\u003cp\u003eThe core idea behind the Intersection Observer is to provide a way to efficiently perform actions based on whether an element is visible within the viewport. This capability is crucial for features like lazy loading images, animating elements on scroll, and implementing infinite scrolling.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eConstructing the Observer\u003c/h2\u003e\n\u003cp\u003eOur implementation, \u003ccode\u003eMyIntersectionObserver\u003c/code\u003e, starts with a constructor that accepts a callback function. This callback is invoked with an array of entries, each representing the state of an observed element, whenever those elements enter or exit the viewport.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass MyIntersectionObserver {\r\n  constructor(callbackFn) {\r\n    this.entries = [];\r\n    window.addEventListener('scroll', this.handleScroll);  \r\n  }\r\n  // Other methods...\r\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEach entry in the array contains information about the observed element, such as its bounding rectangle and whether it is intersecting with the viewport.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eObserving Elements\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eobserve\u003c/code\u003e method allows us to add elements to the list of observed entries. When an element is observed, its initial state is recorded, and the scroll event listener is set up to monitor changes in its visibility.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eobserve(element) {\r\n  this.entries.push({\r\n    element: element,\r\n    topOffset: element.getBoundingClientRect().top + window.scrollY,\r\n    bottomOffset: element.getBoundingClientRect().bottom + window.scrollY,\r\n    isIntersecting: false\r\n  });\r\n  this.handleScroll();\r\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eHandling Scroll Events\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003ehandleScroll\u003c/code\u003e method is where the magic happens. On each scroll event, it checks each observed element against the viewport\u0026#8217;s bounds to determine if it\u0026#8217;s intersecting. If an element\u0026#8217;s intersection state changes, the callback function is invoked with the updated entries.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehandleScroll() {\r\n  this.entries.forEach((entry, idx) =\u0026gt; {\r\n    const isCurrentlyIntersecting = this.isIntersecting(entry);\r\n    if (isCurrentlyIntersecting !== entry.isIntersecting) {\r\n      this.entries[idx].isIntersecting = isCurrentlyIntersecting;\r\n      callbackFn(this.entries);\r\n    }\r\n  });\r\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003ePractical Applications and Considerations\u003c/h2\u003e\n\u003cp\u003eThis implementation of an Intersection Observer can be used to enhance user experience and performance on a webpage. However, it\u0026#8217;s essential to consider the efficiency of event handling and to debounce or throttle scroll events in a production environment to avoid performance issues.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eBuilding a custom Intersection Observer sheds light on the underlying mechanics of this powerful API and opens up possibilities for customized solutions tailored to specific needs. By understanding and leveraging this tool, developers can create more interactive and performant web applications.\u003c/p\u003e\n\u003c/section\u003e\n\u003c/article\u003e\n",
    "category": [
        "Javascript"
    ],
    "likes": 0,
    "dislikes": null,
    "videoLink": "https://www.youtube.com/embed/VCkOoDk4a80?si=qhc3jCsMK3b6vgf2",
    "company": null,
    "subtitle": null,
    "comingSoon": null,
    "seo": {
        "pageTitle": "How to build 18. Intersection Observer in Javascript - Frontend Interview Question - FrontendLead",
        "pageDescription": "Dive into our detailed guide on creating a custom Intersection Observer in JavaScript. Understand the core concepts, practical applications, and performance considerations for efficient web development.",
        "pageURL": "intersection-observer",
        "isCodingPage": true,
        "useGeneralPageSD": false,
        "index": true,
        "ogImage": "",
        "twitterImage": "",
        "keywords": "",
        "secondaryStructuredData": {
            "@context": "http://schema.org",
            "@type": "Question",
            "name": "How to implement How to build  Intersection Observer in Javascript  Frontend Interview Question  FrontendLead in Javascript?",
            "text": "\u003cp\u003eYou are tasked with implementing an \u003cstrong\u003eIntersection Observer\u003c/strong\u003e, a utility commonly used in frontend development to detect when an element enters or exits the viewport. Your goal is to c",
            "dateCreated": "2024-04-01",
            "author": {
                "@type": "Organization",
                "name": "FrontendLead"
            },
            "acceptedAnswer": {
                "@type": "Answer",
                "text": "\u003carticle\u003e\n\u003csection\u003e\n\u003ch1\u003eImplementing an Intersection Observer in JavaScript\u003c/h1\u003e\n\u003cp\u003eThe Intersection Observer API provides a powerful way to asynchronously observe changes in the intersection of a tar",
                "dateCreated": "2024-04-01",
                "author": {
                    "@type": "Organization",
                    "name": "FrontendLead"
                }
            }
        }
    }
}
