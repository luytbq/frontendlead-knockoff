{
    "type": "coding",
    "id": "virtual-dom-iii",
    "title": "35. Virtual DOM III",
    "difficulty": [
        "Hard"
    ],
    "link": "virtual-dom-iii",
    "problemStatement": "\u003cp\u003eBuild a JSX-like compiler that transforms a given string representing HTML code into a JavaScript object representation. The compiler should parse the HTML-like string and extract the tag name, attributes (if any), and children content. Consider the following input string:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;a\u0026gt;frontendlead.com\u0026lt;/a\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe expected output for the above input should be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\r\n \"openingElement\": {\r\n  \"name\": \"a\"\r\n },\r\n \"closingElement\": {\r\n  \"name\": \"a\"\r\n },\r\n \"props\": {\r\n  \"children\": [\r\n   \"frontendlead.com\"\r\n  ]\r\n }\r\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe compiler must handle various cases, including strings with extra spaces, and ensure proper tag formatting. For instance, the following examples should be successfully parsed:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;a\u0026gt;bfe.dev\u0026lt;/a\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt; a \u0026gt; bfe.dev \u0026lt; / a \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHowever, certain inputs should trigger parsing errors, such as:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIncorrect tag formats like \u003ccode\u003e'2a\u0026gt;bfe.dev\u0026lt;/a\u0026gt;'\u003c/code\u003e or \u003ccode\u003e'\u0026lt;a\u0026gt;\u0026lt;/b\u0026gt;'\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eStrings that do not strictly follow the tag structure, e.g., \u003ccode\u003e'\u0026lt;a\u0026gt;\u0026gt;\u0026lt;/a\u0026gt;'\u003c/code\u003e, \u003ccode\u003e'\u0026lt;a\u0026gt;\u0026lt;a\u0026gt;'\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eUnmatched opening and closing tags or misplaced characters within tags\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis challenge aims to assess your ability to parse and transform string data, manage errors, and construct object representations, which are essential skills in front-end development and working with virtual DOM concepts.\u003c/p\u003e\n",
    "premiumQuestion": true,
    "testCases": [
        {
            "id": 0,
            "description": "should correctly parse a simple tag with content",
            "test": "it('should correctly parse a simple tag with content', (done) =\u003e {\r\n    const code = '\u003ca\u003ebfe.dev\u003c/a\u003e';\r\n    const result = parseHTMLCode(code);\r\n    const expected = {\r\n      openingElement: { name: 'a' },\r\n      closingElement: { name: 'a' },\r\n      props: { children: 'bfe.dev' }\r\n    };\r\n    expect(result).to.deep.equal(expected);\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 1,
            "description": "should correctly parse a tag with extra spaces",
            "test": "it('should correctly parse a tag with extra spaces', (done) =\u003e {\r\n    const code = '\u003c a \u003e bfe.dev \u003c / a \u003e';\r\n    const result = parseHTMLCode(code);\r\n    const expected = {\r\n      openingElement: { name: 'a' },\r\n      closingElement: { name: 'a' },\r\n      props: { children: ' bfe.dev ' }\r\n    };\r\n    expect(result).to.deep.equal(expected);\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 2,
            "description": "should throw an error for incorrect tag format",
            "test": "it('should throw an error for incorrect tag format', (done) =\u003e {\r\n    const code = '2a\u003ebfe.dev\u003c/a\u003e';\r\n    expect(() =\u003e parseHTMLCode(code)).to.throw();\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 3,
            "description": "should throw an error for mismatched tags",
            "test": "it('should throw an error for mismatched tags', (done) =\u003e {\r\n    const code = '\u003ca\u003e\u003c/b\u003e';\r\n    expect(() =\u003e parseHTMLCode(code)).to.throw();\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 4,
            "description": "should correctly parse a tag with attributes",
            "test": "it('should correctly parse a tag with attributes', (done) =\u003e {\r\n    const code = '\u003ca data=\"foo\"\u003ebfe.dev\u003c/a\u003e';\r\n    const result = parseHTMLCode(code);\r\n    const expected = {\r\n      openingElement: { name: 'a' },\r\n      closingElement: { name: 'a' },\r\n      props: {\r\n        data: '\"foo\"',\r\n        children: 'bfe.dev'\r\n      }\r\n    };\r\n    expect(result).to.deep.equal(expected);\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 5,
            "description": "should correctly parse a tag with multiple attributes",
            "test": "it('should correctly parse a tag with multiple attributes', (done) =\u003e {\r\n    const code = '\u003ca id=\"link\" class=\"small\"\u003ebfe.dev\u003c/a\u003e';\r\n    const result = parseHTMLCode(code);\r\n    const expected = {\r\n      openingElement: { name: 'a' },\r\n      closingElement: { name: 'a' },\r\n      props: {\r\n        id: '\"link\"',\r\n        class: '\"small\"',\r\n        children: 'bfe.dev'\r\n      }\r\n    };\r\n    expect(result).to.deep.equal(expected);\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 6,
            "description": "should correctly parse a tag with a data attribute",
            "test": "it('should correctly parse a tag with a data attribute', (done) =\u003e {\r\n    const code = '\u003ca data-foo=\"bar\"\u003econtent\u003c/a\u003e';\r\n    const result = parseHTMLCode(code);\r\n    const expected = {\r\n      openingElement: { name: 'a' },\r\n      closingElement: { name: 'a' },\r\n      props: {\r\n        \"data-foo\": '\"bar\"',\r\n        children: 'content'\r\n      }\r\n    };\r\n    expect(result).to.deep.equal(expected);\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 7,
            "description": "should throw an error for tag name starting with a number",
            "test": "it('should throw an error for tag name starting with a number', (done) =\u003e {\r\n    const code = '\u003c2a\u003ebfe.dev\u003c/a\u003e';\r\n    expect(() =\u003e parseHTMLCode(code)).to.throw();\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 8,
            "description": "should throw an error for unbalanced angle brackets",
            "test": "it('should throw an error for unbalanced angle brackets', (done) =\u003e {\r\n    const code = '\u003ca\u003e\u003ebfe.dev\u003c/a\u003e';\r\n    expect(() =\u003e parseHTMLCode(code)).to.throw();\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 9,
            "description": "should throw an error for tags not properly closed",
            "test": "it('should throw an error for tags not properly closed', (done) =\u003e {\r\n    const code = '\u003ca bfe.dev\u003c/a\u003e';\r\n    expect(() =\u003e parseHTMLCode(code)).to.throw();\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 10,
            "description": "should throw an error for missing closing tag",
            "test": "it('should throw an error for missing closing tag', (done) =\u003e {\r\n    const code = '\u003ca\u003ebfe.dev';\r\n    expect(() =\u003e parseHTMLCode(code)).to.throw();\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 11,
            "description": "should throw an error for missing opening tag",
            "test": "it('should throw an error for missing opening tag', (done) =\u003e {\r\n    const code = 'bfe.dev\u003c/a\u003e';\r\n    expect(() =\u003e parseHTMLCode(code)).to.throw();\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        }
    ],
    "examples": [],
    "constraints": [
        {
            "constraint": "The input string must strictly represent a single HTML-like element with an opening and closing tag, including potential content or children within."
        },
        {
            "constraint": "The opening and closing tags must match, and the tag name should not start with a number or contain special characters other than underscores or hyphens."
        },
        {
            "constraint": "Attributes within the opening tag should be well-formed, with each attribute name followed by an equal sign and its value enclosed in double quotes."
        },
        {
            "constraint": "The parser should trim any leading or trailing spaces within the input string, ensuring accurate parsing even with extra whitespace."
        },
        {
            "constraint": "Nested elements are not supported in this version of the compiler; only a single level of elements should be provided."
        },
        {
            "constraint": "The input string's length, including tags, attributes, and content, should not exceed 1000 characters to ensure efficient parsing."
        },
        {
            "constraint": "The function will throw an error for any invalid input that does not conform to the expected HTML-like structure or violates the constraints mentioned."
        }
    ],
    "order": null,
    "starterJSCode": "function parseHTMLCode() {\r\n    // Write your code here\r\n}\r\n\r\n// Do not edit below this line\r\nexport default parseHTMLCode;",
    "starterHTMLCode": null,
    "starterCSSCode": null,
    "solutionCode": "// Function to parse HTML code and extract metadata\r\nfunction parseHTMLCode(code) {\r\n  code = code.trim();\r\n\r\n  // Check if the code starts and ends with the correct tag format\r\n  if (code[0] !== '\u003c' || code[code.length - 1] !== '\u003e') {\r\n    throw new Error('Code does not start or end with the correct tag format.');\r\n  }\r\n  \r\n  // Check to make sure the lengths are the same\r\n  if(code.split('\u003c').length !== code.split('\u003e').length) {\r\n  \tthrow new Error('Unequal length for \u003c or \u003e');\r\n  }\r\n  \r\n  // Get all indexes of first opening and closing tags\r\n  const firstOpeningTagIndex = code.indexOf('\u003c') + 1;\r\n  const firstClosingTagIndex = code.indexOf('\u003e');\r\n  const contentWithinFirstTag = code.slice(firstOpeningTagIndex, firstClosingTagIndex).trim('').split(' ');\r\n  const openingTagName = contentWithinFirstTag[0];\r\n  \r\n  // Verify the opening tag does not have number\r\n\tif(!Number.isNaN(parseInt(openingTagName))) {\r\n  \tthrow new Error('Opening tag name cannot include a number');\r\n  }\r\n  \r\n  \r\n  // Verify opening tag does not have /\r\n  if(openingTagName.includes('/')) {\r\n  \tthrow new Error('Opening tag cannot contain forward slash');\r\n  }\r\n  \r\n  // Extract attributes\r\n  const attributes = {};\r\n  const attrs = contentWithinFirstTag.splice(1, contentWithinFirstTag.length);\r\n  attrs.forEach(item =\u003e {\r\n  \tconst keyValPairs = item.split('=');\r\n    attributes[keyValPairs[0]] = keyValPairs[1];\r\n  });\r\n  \r\n  // Get last opening and closing tag indexes\r\n  const lastOpeningTagIndex = code.lastIndexOf('\u003c') + 1;\r\n  const lastClosingTagIndex = code.lastIndexOf('\u003e');\r\n  // Get children from that\r\n  const children = code.slice(firstClosingTagIndex+1, lastOpeningTagIndex-1);\r\n  // Get the content within the last tag\r\n  const lastContentWithinTag = code\r\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.slice(lastOpeningTagIndex, lastClosingTagIndex)\r\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.trim()\r\n                                .replace(' ', '');\r\n\r\n\t// Verify last tag starts with /\r\n  if(lastContentWithinTag[0]  !== '/') {\r\n  \tthrow new Error('Closing tag must start off with a /');\r\n  }\r\n  \r\n  // Get last tag name\r\n  const lastTagName = lastContentWithinTag.split('/').join('').trim('');\r\n  \r\n   // Final check to make sure last tag and first tag match\r\n  if(lastTagName !== openingTagName) {\r\n  \tthrow new Error('Opening tag vs Closing tag mismatch');\r\n  }\r\n\r\n  // Construct and return the parsed object representation\r\n  return {\r\n    openingElement: { name: openingTagName },\r\n    closingElement: { name: lastTagName },\r\n    props: {\r\n      ...attributes,\r\n      children\r\n    }\r\n  };\r\n}",
    "starterFunctionName": null,
    "solution": "\u003carticle\u003e\n\u003csection\u003e\n\u003cp\u003eThe \u003ccode\u003eparseHTMLCode\u003c/code\u003e function is designed to interpret a JSX-like string and convert it into a structured JavaScript object. This conversion process is essential for understanding and manipulating the structure of HTML-like elements programmatically. The function\u0026#8217;s core steps involve string trimming, validation, extraction of tags and attributes, and assembly of the final object representation.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eTrimming and Initial Validation\u003c/h2\u003e\n\u003cp\u003eThe function begins by trimming the input string to eliminate any leading or trailing whitespace, ensuring that the parsing process is not affected by extraneous spaces.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecode = code.trim();\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt then validates that the string correctly starts with \u0026#8216;\u003c' and ends with '\u003e\u0026#8216;, throwing an error if this condition is not met, to indicate an incorrect tag format.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif (code[0] !== '\u003c' || code[code.length - 1] !== '\u003e') {\r\n  throw new Error('Code does not start or end with the correct tag format.');\r\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eTag and Attribute Extraction\u003c/h2\u003e\n\u003cp\u003eAfter validation, the function proceeds to identify the opening and closing tags and extract any attributes present within the opening tag. This process involves locating the indices of \u0026#8216;\u003c' and '\u003e\u0026#8216; characters and parsing the substring between them.\u003c/p\u003e\n\u003cp\u003eThe opening tag name is determined by isolating the first word following the initial \u0026#8216;\u003c'. If the tag name starts with a number or contains a '/', an error is thrown to maintain the integrity of the expected format.\u003c/p\u003e\n\u003cp\u003eAttributes, if any, are extracted by splitting the remaining part of the opening tag string by spaces and then by \u0026#8216;=\u0026#8217; to separate attribute names from their values.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eChildren and Closing Tag Validation\u003c/h2\u003e\n\u003cp\u003eThe content between the opening and closing tags is considered the element\u0026#8217;s children and is extracted accordingly. The function also validates that the closing tag mirrors the opening tag, ensuring a proper match and structure.\u003c/p\u003e\n\u003cp\u003eIf the closing tag does not start with \u0026#8216;/\u0026#8217;, or if the tag names do not match, errors are thrown to indicate these discrepancies, preventing incorrect or malformed inputs from being parsed.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eFinal Object Assembly\u003c/h2\u003e\n\u003cp\u003eThe final step involves constructing the JavaScript object with the extracted data, organizing it into a structured format that includes the opening and closing element names, any attributes as properties, and the children content.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ereturn {\r\n  openingElement: { name: openingTagName },\r\n  closingElement: { name: lastTagName },\r\n  props: {\r\n    ...attributes,\r\n    children\r\n  }\r\n};\u003c/code\u003e\u003c/pre\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003cp\u003eThis function exemplifies parsing a simplified HTML-like syntax into a structured form, akin to how JSX is transformed into React element objects. It demonstrates fundamental string manipulation, validation, and error handling techniques in JavaScript.\u003c/p\u003e\n\u003c/section\u003e\n\u003c/article\u003e\n",
    "category": [
        "DOM API"
    ],
    "likes": 0,
    "dislikes": null,
    "videoLink": "https://www.youtube.com/embed/pIpYNP_lIv0",
    "company": [
        "Facebook"
    ],
    "subtitle": null,
    "comingSoon": null,
    "seo": {
        "pageTitle": "35. Virtual DOM III - Frontend Interview Question - FrontendLead",
        "pageDescription": "Discover how to parse HTML-like strings into structured JavaScript objects with our in-depth guide. Perfect your string manipulation and parsing skills for frontend development and interview prep.",
        "pageURL": "virtual-dom-iii",
        "isCodingPage": true,
        "useGeneralPageSD": false,
        "index": true,
        "ogImage": "",
        "twitterImage": "",
        "keywords": "",
        "secondaryStructuredData": {
            "@context": "http://schema.org",
            "@type": "Question",
            "name": "How to implement  Virtual DOM III  Frontend Interview Question  FrontendLead in Javascript?",
            "text": "\u003cp\u003eBuild a JSX-like compiler that transforms a given string representing HTML code into a JavaScript object representation. The compiler should parse the HTML-like string and extract the tag name, att",
            "dateCreated": "2024-04-01",
            "author": {
                "@type": "Organization",
                "name": "FrontendLead"
            },
            "acceptedAnswer": {
                "@type": "Answer",
                "text": "\u003carticle\u003e\n\u003csection\u003e\n\u003cp\u003eThe \u003ccode\u003eparseHTMLCode\u003c/code\u003e function is designed to interpret a JSX-like string and convert it into a structured JavaScript object. This conversion process is essential for u",
                "dateCreated": "2024-04-01",
                "author": {
                    "@type": "Organization",
                    "name": "FrontendLead"
                }
            }
        }
    }
}
