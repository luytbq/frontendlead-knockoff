{
    "type": "coding",
    "id": "filtering-matching-json",
    "title": "3. Filtering Matching JSON",
    "difficulty": [
        "Medium"
    ],
    "link": "filtering-matching-json",
    "problemStatement": "\u003cp\u003eYou are presented with a task involving a dataset represented as an array of objects, where each object delineates a person\u0026#8217;s attributes, such as name, company, position, and level. Additionally, there is a match object specifying criteria to identify matches based on specific attributes. Your challenge is to develop a function, \u003ccode\u003efindMatches\u003c/code\u003e, which filters the dataset to return only the objects that meet all the criteria outlined in the match object.\u003c/p\u003e\n\u003cp\u003eThe core objective is to write a program that, given the dataset and the match object, produces an array containing only the objects that satisfy all the criteria in the match object. For instance:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edata: [\r\n  { name: 'John', company: 'Google', position: 'Software Engineer', level: 'Entry' },\r\n  { name: 'Ann', company: 'Waymo', position: 'Product Manager', level: 'Entry' }\r\n]\r\nmatch: { position: 'Product Manager', level: 'Entry' }\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\r\n  { name: 'Ann', company: 'Waymo', position: 'Product Manager', level: 'Entry' }\r\n]\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis exercise tests your ability to manipulate complex data structures and implement effective filtering algorithms, essential skills in data handling and software development. It involves traversing arrays, understanding object properties, and applying logical operations to achieve the desired outcome.\u003c/p\u003e\n",
    "premiumQuestion": true,
    "testCases": [
        {
            "id": 0,
            "description": "should correctly filter objects matching the criteria",
            "test": "it('should correctly filter objects matching the criteria', (done) =\u003e {\r\n    const data = [\r\n      { name: 'John', company: 'Google', position: 'Software Engineer', level: 'Entry' },\r\n      { name: 'Ann', company: 'Waymo', position: 'Product Manager', level: 'Entry' }\r\n    ];\r\n    const match = { position: 'Product Manager', level: 'Entry' };\r\n    const expected = [\r\n      { name: 'Ann', company: 'Waymo', position: 'Product Manager', level: 'Entry' }\r\n    ];\r\n    \r\n    const result = findMatches(data, match);\r\n    expect(result).to.deep.equal(expected);\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 1,
            "description": "should return an empty array when no objects match the criteria",
            "test": "it('should return an empty array when no objects match the criteria', (done) =\u003e {\r\n    const data = [\r\n      { name: 'John', company: 'Google', position: 'Software Engineer', level: 'Senior' },\r\n      { name: 'Ann', company: 'Waymo', position: 'Product Manager', level: 'Mid' }\r\n    ];\r\n    const match = { position: 'Product Manager', level: 'Entry' };\r\n    const expected = [];\r\n    \r\n    const result = findMatches(data, match);\r\n    expect(result).to.deep.equal(expected);\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 2,
            "description": "should handle mixed data types in attributes",
            "test": "it('should handle mixed data types in attributes', (done) =\u003e {\r\n    const data = [\r\n      { name: 'Dave', company: 'Netflix', position: 'Data Analyst', level: 3 },\r\n      { name: 'Sara', company: 'Amazon', position: 'Data Analyst', level: 'Senior' }\r\n    ];\r\n    const match = { position: 'Data Analyst', level: 3 };\r\n    const expected = [\r\n      { name: 'Dave', company: 'Netflix', position: 'Data Analyst', level: 3 }\r\n    ];\r\n    \r\n    const result = findMatches(data, match);\r\n    expect(result).to.deep.equal(expected);\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 3,
            "description": "should return the entire array when the match object is empty",
            "test": "it('should return the entire array when the match object is empty', (done) =\u003e {\r\n    const data = [\r\n      { name: 'Tom', company: 'Spotify', position: 'Developer', level: 'Mid' },\r\n      { name: 'Jerry', company: 'Spotify', position: 'Designer', level: 'Senior' }\r\n    ];\r\n    const match = {};\r\n    const expected = data;\r\n    \r\n    const result = findMatches(data, match);\r\n    expect(result).to.deep.equal(expected);\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 4,
            "description": "should handle cases where some objects have missing attributes",
            "test": "it('should handle cases where some objects have missing attributes', (done) =\u003e {\r\n    const data = [\r\n      { name: 'Alice', position: 'Developer', level: 'Junior' },\r\n      { name: 'Bob', company: 'Microsoft', position: 'Developer', level: 'Junior' }\r\n    ];\r\n    const match = { company: 'Microsoft', position: 'Developer', level: 'Junior' };\r\n    const expected = [\r\n      { name: 'Bob', company: 'Microsoft', position: 'Developer', level: 'Junior' }\r\n    ];\r\n    \r\n    const result = findMatches(data, match);\r\n    expect(result).to.deep.equal(expected);\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        }
    ],
    "examples": [],
    "constraints": [
        {
            "constraint": "Nested objects or arrays within person objects are not considered for matching criteria."
        },
        {
            "constraint": "Attributes in the match object are limited to strings and numbers."
        },
        {
            "constraint": "The data array can contain up to 1000 person objects."
        },
        {
            "constraint": "Each person object can have up to 10 attributes."
        },
        {
            "constraint": "The match object can specify up to 5 attributes for matching criteria."
        },
        {
            "constraint": "The function must handle cases where the match object has attributes not present in the person objects, returning no matches in such scenarios."
        },
        {
            "constraint": "Performance is a consideration: the solution should aim to minimize the time complexity, ideally achieving linear time complexity relative to the size of the data array."
        }
    ],
    "order": null,
    "starterJSCode": "function findMatches(data, match) {\r\n    // Write your code here\r\n}\r\n\r\n// Do not edit below this line\r\nexport default findMatches;",
    "starterHTMLCode": null,
    "starterCSSCode": null,
    "solutionCode": "function findMatches(data, search) {\r\n  // Use the filter method to iterate over each object in the 'data' array\r\n  return data.filter(row =\u003e {\r\n    // Obtain the keys from the current object and the search criteria for comparison\r\n    const itemKeys = Object.keys(row);\r\n    const searchKeys = Object.keys(search);\r\n\r\n    // Use the 'every' method to ensure every search key matches the corresponding key in the current object\r\n    const allKeysAndValuesMatch = searchKeys.every(key =\u003e {\r\n      // Check if the current key from the search criteria exists in the current object's keys\r\n      const keysMatch = itemKeys.includes(key);\r\n      if (!keysMatch) return false; // If the key doesn't exist, the object doesn't match\r\n\r\n      // Compare the value of the current key in both the object and search criteria to ensure they match\r\n      const rowVal = row[key];\r\n      const searchVal = search[key];\r\n      \r\n      // If the values match, continue checking the next key; otherwise, the object doesn't match\r\n      return rowVal === searchVal;\r\n    });\r\n    \r\n    // Return true to include the current object in the filtered result if all keys and their values match\r\n    return allKeysAndValuesMatch;\r\n  });\r\n}",
    "starterFunctionName": null,
    "solution": "\u003cp\u003eThe \u003ccode\u003efindMatches\u003c/code\u003e function is designed to filter an array of objects based on specified criteria within a match object. This solution is particularly useful in scenarios where dynamic filtering of data is required based on various attributes.\u003c/p\u003e\n\u003ch2\u003eUnderstanding the Approach\u003c/h2\u003e\n\u003cp\u003eThe function utilizes JavaScript\u0026#8217;s array \u003ccode\u003efilter\u003c/code\u003e method to iterate over each object in the provided data array. The \u003ccode\u003efilter\u003c/code\u003e method is ideal for this task as it creates a new array with all elements that pass the test implemented by the provided function.\u003c/p\u003e\n\u003ch2\u003eStep-by-Step Breakdown\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eIterating Over Data:\u003c/strong\u003e For each object in the data array, the function checks if it meets all the criteria specified in the match object.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eKey Matching:\u003c/strong\u003e The keys from the current object and the match object are retrieved and compared to ensure the current object contains all the necessary keys to potentially be a match.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eValue Comparison:\u003c/strong\u003e If the keys match, the corresponding values for these keys are compared between the current object and the match object. Only if all values match, the current object is considered a match.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFiltering Results:\u003c/strong\u003e The \u003ccode\u003efilter\u003c/code\u003e method then includes the object in the result array if it matches all criteria, effectively filtering out non-matching objects.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eCode Walkthrough\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003e\r\nfunction findMatches(data, search) {\r\n  return data.filter(row =\u0026gt; {\r\n    const itemKeys = Object.keys(row);\r\n    const searchKeys = Object.keys(search);\r\n    return searchKeys.every(key =\u0026gt; itemKeys.includes(key) \u0026amp;\u0026amp; row[key] === search[key]);\r\n  });\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis code snippet demonstrates the elegance of the solution, leveraging high-order functions to achieve a concise and readable implementation. The use of \u003ccode\u003eevery\u003c/code\u003e ensures that the function only returns true if every specified criterion is met, making it a robust solution for filtering data.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eThis approach to filtering data based on dynamic criteria provides a flexible and powerful tool for working with JSON data structures. By understanding and applying these concepts, developers can efficiently implement similar filtering functionalities in various applications.\u003c/p\u003e\n\u003ch2\u003eComplexity Analysis\u003c/h2\u003e\n\u003cp\u003eThe time complexity of this solution is primarily influenced by the \u003ccode\u003efilter\u003c/code\u003e method, which operates in O(n) time where n is the number of objects in the data array. The \u003ccode\u003eevery\u003c/code\u003e method adds an additional layer, but since the number of keys in the match object is typically small, this does not significantly affect the overall time complexity.\u003c/p\u003e\n",
    "category": [
        "JSON"
    ],
    "likes": 0,
    "dislikes": null,
    "videoLink": "https://www.youtube.com/embed/8xOAFXTriUk",
    "company": [
        "Robinhood",
        "Apple"
    ],
    "subtitle": null,
    "comingSoon": null,
    "seo": {
        "pageTitle": "3. Filtering Matching JSON - Frontend Interview Question - FrontendLead",
        "pageDescription": "Dive into our detailed guide on data filtering in JavaScript. Learn how to implement the findMatches function to filter an array of objects based on specific criteria. This tutorial enhances your skills in handling complex data structures and applying logical operations, crucial for effective software development.",
        "pageURL": "filtering-matching-json",
        "isCodingPage": true,
        "useGeneralPageSD": false,
        "index": true,
        "ogImage": "",
        "twitterImage": "",
        "keywords": "",
        "secondaryStructuredData": {
            "@context": "http://schema.org",
            "@type": "Question",
            "name": "How to implement  Filtering Matching JSON  Frontend Interview Question  FrontendLead in Javascript?",
            "text": "\u003cp\u003eYou are presented with a task involving a dataset represented as an array of objects, where each object delineates a person\u0026#8217;s attributes, such as name, company, position, and level. Additiona",
            "dateCreated": "2024-04-01",
            "author": {
                "@type": "Organization",
                "name": "FrontendLead"
            },
            "acceptedAnswer": {
                "@type": "Answer",
                "text": "\u003cp\u003eThe \u003ccode\u003efindMatches\u003c/code\u003e function is designed to filter an array of objects based on specified criteria within a match object. This solution is particularly useful in scenarios where dynamic fi",
                "dateCreated": "2024-04-01",
                "author": {
                    "@type": "Organization",
                    "name": "FrontendLead"
                }
            }
        }
    }
}
