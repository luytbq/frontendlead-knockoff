{
    "type": "coding",
    "id": "string-repeater",
    "title": "73. String Repeater",
    "difficulty": [
        "Easy"
    ],
    "link": "string-repeater",
    "problemStatement": "\u003carticle\u003e\n\u003cp\u003eWrite a function named \u003ccode\u003emyRepeat\u003c/code\u003e that extends the String prototype. This function should allow a string to be repeated a specified number of times, enhancing the native capabilities of string manipulation in JavaScript.\u003c/p\u003e\n\u003ch3\u003eInput\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eString:\u003c/strong\u003e The string to be repeated.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInteger (times):\u003c/strong\u003e The number of times the string should be repeated.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eOutput\u003c/h3\u003e\n\u003cp\u003eA new string that concatenates the original string the specified number of times.\u003c/p\u003e\n\u003ch3\u003eExample\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003ccode\u003e\"hello world \".myRepeat(2)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003ccode\u003e\"hello world hello world \"\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe function \u003ccode\u003emyRepeat\u003c/code\u003e takes an integer \u003ccode\u003etimes\u003c/code\u003e as an argument and returns a new string that repeats the original string \u003ccode\u003etimes\u003c/code\u003e number of times. This custom method does not modify the original string but instead returns a new string with the repeated content, demonstrating an extension of the String prototype\u0026#8217;s functionality in JavaScript.\u003c/p\u003e\n\u003c/article\u003e\n",
    "premiumQuestion": true,
    "testCases": [
        {
            "id": 0,
            "description": "should repeat the string a given number of times",
            "test": "it('should repeat the string a given number of times', (done) =\u003e {\r\n    const result = \"abc\".myRepeat(3);\r\n    expect(result).to.equal(\"abcabcabc\");\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 1,
            "description": "should return an empty string when repeated zero times",
            "test": "it('should return an empty string when repeated zero times', (done) =\u003e {\r\n    const result = \"abc\".myRepeat(0);\r\n    expect(result).to.equal(\"\");\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 2,
            "description": "should handle negative input by returning an empty string",
            "test": "it('should handle negative input by returning an empty string', (done) =\u003e {\r\n    const result = \"abc\".myRepeat(-1);\r\n    expect(result).to.equal(\"\");\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 3,
            "description": "should concatenate spaces when the string contains spaces",
            "test": "it('should concatenate spaces when the string contains spaces', (done) =\u003e {\r\n    const result = \"hello \".myRepeat(2);\r\n    expect(result).to.equal(\"hello hello \");\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 4,
            "description": "should work with special characters",
            "test": "it('should work with special characters', (done) =\u003e {\r\n    const result = \"!@#\".myRepeat(2);\r\n    expect(result).to.equal(\"!@#!@#\");\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 5,
            "description": "should return the original string when repeated once",
            "test": "it('should return the original string when repeated once', (done) =\u003e {\r\n    const result = \"once\".myRepeat(1);\r\n    expect(result).to.equal(\"once\");\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        }
    ],
    "examples": [],
    "constraints": [],
    "order": null,
    "starterJSCode": "String.prototype.myRepeat = function(times) {\r\n  // Write your code here\r\n};\r\n\r\n// Do not edit below this line\r\nexport default String",
    "starterHTMLCode": null,
    "starterCSSCode": null,
    "solutionCode": "// Extending the String prototype with the myRepeat function\r\nString.prototype.myRepeat = function(times) {\r\n  let result = '';\r\n  \r\n  // Repeat the string 'times' number of times\r\n  for (let i = 0; i \u003c times; i++) {\r\n    result += this; // 'this' refers to the string instance the method is called on\r\n  }\r\n  \r\n  return result; // Return the concatenated string\r\n};",
    "starterFunctionName": null,
    "solution": "\u003carticle\u003e\n\u003csection\u003e\n\u003ch2\u003eEnhancing String Functionality with `myRepeat`\u003c/h2\u003e\n\u003cp\u003eThe `myRepeat` function is a custom method added to the JavaScript String prototype. It allows for the repetition of a string a specified number of times, extending the built-in capabilities of string manipulation.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eHow It Works\u003c/h2\u003e\n\u003cp\u003eThe function takes one parameter, \u003ccode\u003etimes\u003c/code\u003e, which indicates how many times the original string should be repeated. It constructs the repeated string by concatenating the original string with itself the specified number of times.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eImplementation Details\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eThe method initializes an empty string, \u003ccode\u003eresult\u003c/code\u003e, to accumulate the repetitions.\u003c/li\u003e\n\u003cli\u003eIt uses a for loop to append the original string (\u003ccode\u003ethis\u003c/code\u003e) to \u003ccode\u003eresult\u003c/code\u003e for \u003ccode\u003etimes\u003c/code\u003e iterations.\u003c/li\u003e\n\u003cli\u003eThe final concatenated string is then returned, representing the original string repeated as desired.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis approach ensures that the original string remains unchanged, maintaining the immutability of string instances in JavaScript.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eExample Usage\u003c/h2\u003e\n\u003cp\u003eCalling \u003ccode\u003e\"hello \".myRepeat(2)\u003c/code\u003e will return \u003ccode\u003e\"hello hello \"\u003c/code\u003e, demonstrating the method\u0026#8217;s utility in creating repeated string sequences.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eAdvantages\u003c/h2\u003e\n\u003cp\u003eThe `myRepeat` function offers a convenient way to generate patterns, replicate strings for formatting, or any other scenario where string repetition is required. By extending the String prototype, it integrates seamlessly with existing string instances, providing a natural syntax for repetition operations.\u003c/p\u003e\n\u003c/section\u003e\n\u003c/article\u003e\n",
    "category": [
        "Array"
    ],
    "likes": 0,
    "dislikes": null,
    "videoLink": "",
    "company": [
        "Apple"
    ],
    "subtitle": null,
    "comingSoon": null,
    "seo": {
        "pageTitle": "73. String Repeater - Apple Frontend Interview Question - FrontendLead",
        "pageDescription": "",
        "pageURL": "string-repeater",
        "isCodingPage": true,
        "useGeneralPageSD": false,
        "index": true,
        "ogImage": "",
        "twitterImage": "",
        "keywords": "",
        "secondaryStructuredData": {
            "@context": "http://schema.org",
            "@type": "Question",
            "name": "How to implement  String Repeater  Apple Frontend Interview Question  FrontendLead in Javascript?",
            "text": "\u003carticle\u003e\n\u003cp\u003eWrite a function named \u003ccode\u003emyRepeat\u003c/code\u003e that extends the String prototype. This function should allow a string to be repeated a specified number of times, enhancing the native capabi",
            "dateCreated": "2024-04-01",
            "author": {
                "@type": "Organization",
                "name": "FrontendLead"
            },
            "acceptedAnswer": {
                "@type": "Answer",
                "text": "\u003carticle\u003e\n\u003csection\u003e\n\u003ch2\u003eEnhancing String Functionality with `myRepeat`\u003c/h2\u003e\n\u003cp\u003eThe `myRepeat` function is a custom method added to the JavaScript String prototype. It allows for the repetition of a st",
                "dateCreated": "2024-04-01",
                "author": {
                    "@type": "Organization",
                    "name": "FrontendLead"
                }
            }
        }
    }
}
he total number of elements across all nested arrays.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eIterative Approach\u003c/h2\u003e\n\u003cp\u003eThe iterative approach, demonstrated by the function \u003ccode\u003eflattenIteratively\u003c/code\u003e, utilizes a stack to manage the elements yet to be processed. This method starts by treating the entire input array as a stack. We then repeatedly pop elements from the stack, inspecting each one. If an element is an array, its contents are pushed back onto the stack for further inspection. If it\u0026#8217;s not an array, it\u0026#8217;s added to the results array.\u003c/p\u003e\n\u003cp\u003eOne notable detail in this implementation is that non-array elements are added to the front of the results array. This choice ensures that elements maintain their original order once fully flattened, but it also means that each insertion can potentially be O(n), leading to a worst-case complexity of O(n^2) for the entire operation, where n is the total number of elements to be processed.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eComparison and Complexity\u003c/h2\u003e\n\u003cp\u003eBoth methods effectively flatten nested arrays, but their efficiency can vary significantly based on the input data\u0026#8217;s structure. The recursive approach is elegant and easier to understand but can suffer from stack overflow issues with very deep or large arrays. Its complexity is generally O(n) but can be worse depending on the recursion\u0026#8217;s depth and the function call overhead.\u003c/p\u003e\n\u003cp\u003eOn the other hand, the iterative approach avoids potential stack overflow issues and provides a more controlled execution flow. However, due to the unshift operation\u0026#8217;s O(n) complexity in each step, this method can result in quadratic time complexity O(n^2) in the worst case, making it less efficient for large arrays.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003eIn conclusion, the choice between recursive and iterative approaches to array flattening depends on the specific requirements and constraints of your project, including the expected input array size and depth. While the recursive method is concise and elegant, the iterative method provides a robust alternative for handling large and deeply nested arrays without the risk of stack overflow.\u003c/section\u003e\n\u003c/article\u003e\n",
    "category": [
        "Array"
    ],
    "likes": 10,
    "dislikes": null,
    "videoLink": "https://www.youtube.com/embed/UV9Lp-3uwwg?si=sIkEur5qGudwyPgh",
    "company": [
        "Facebook",
        "Amazon",
        "Google",
        "Robinhood",
        "Zillow",
        "Airbnb",
        "OpenAI",
        "Microsoft",
        "Netflix"
    ],
    "subtitle": null,
    "comingSoon": null,
    "seo": {
        "pageTitle": "Flatten Array Frontend Interview: Recursive and Iterative Solutions - FrontendLead",
        "pageDescription": "Learn how to flatten multi-dimensional arrays in JavaScript for frontend interviews. Recursive and iterative solutions covered.",
        "pageURL": "flatten-arrays-recursively-and-iteratively",
        "isCodingPage": true,
        "useGeneralPageSD": false,
        "index": true,
        "ogImage": "",
        "twitterImage": "",
        "keywords": "",
        "secondaryStructuredData": {
            "@context": "http://schema.org",
            "@type": "Question",
            "name": "How to implement Flatten Array Frontend Interview Recursive and Iterative Solutions  FrontendLead in Javascript?",
            "text": "\u003cp\u003eWrite a function to flatten a multi-dimensional array into a single-level array. Provide both recursive and iterative solutions.\u003c/p\u003e\n\u003cp\u003eThe problem involves transforming an array that contains nest",
            "dateCreated": "2024-04-01",
            "author": {
                "@type": "Organization",
                "name": "FrontendLead"
            },
            "acceptedAnswer": {
                "@type": "Answer",
                "text": "\u003carticle\u003e\n\u003csection\u003eUnderstanding different approaches to flatten nested arrays in JavaScript is crucial for developers, especially when dealing with complex data structures. In this article, we explor",
                "dateCreated": "2024-04-01",
                "author": {
                    "@type": "Organization",
                    "name": "FrontendLead"
                }
            }
        }
    }
}
