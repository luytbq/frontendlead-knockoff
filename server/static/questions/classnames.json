{
    "type": "coding",
    "id": "classnames",
    "title": "7. ClassNames",
    "difficulty": [
        "Easy"
    ],
    "link": "classnames",
    "problemStatement": "\u003cp\u003eThe \u003ccode\u003eclassnames\u003c/code\u003e utility function is a powerful tool in frontend development, used to dynamically construct a string of CSS class names based on certain conditions. This function simplifies the process of conditionally adding classes to HTML elements, making the code more readable and maintainable.\u003c/p\u003e\n\u003cp\u003eYour task is to implement the \u003ccode\u003eclassnames\u003c/code\u003e function in JavaScript. This function should accept any number of arguments, where each argument can be a class name or a condition that determines whether a class name should be included. The function should process these arguments and return a single string containing all class names that meet their respective conditions, separated by spaces.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\r\n// If isActive is true and isError is false, \r\n// buttonClasses should be: 'btn btn-active'\r\nconst buttonClasses = classnames(\r\n    'btn',\r\n    isActive \u0026amp; \u0026amp; 'btn-active',\r\n    isError \u0026amp;\u0026amp; 'btn-error'\r\n);\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis example demonstrates how the \u003ccode\u003eclassnames\u003c/code\u003e function allows for flexible and conditional class name assignment based on the \u003ccode\u003eisActive\u003c/code\u003e and \u003ccode\u003eisError\u003c/code\u003e conditions. Implementing this function will enhance your ability to manage dynamic styling in your web applications.\u003c/p\u003e\n",
    "premiumQuestion": true,
    "testCases": [
        {
            "id": 0,
            "description": "should concatenate class names with spaces",
            "test": "it('should concatenate class names with spaces', (done) =\u003e {\r\n    const result = classnames('class1', 'class2', 'class3');\r\n    expect(result).to.equal('class1 class2 class3');\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 1,
            "description": "should omit falsy values and include truthy values only",
            "test": "it('should omit falsy values and include truthy values only', (done) =\u003e {\r\n    const result = classnames('class1', false, 'class2', null, 'class3', undefined, 0, NaN, '');\r\n    expect(result).to.equal('class1 class2 class3');\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 2,
            "description": "should return an empty string when all values are falsy",
            "test": "it('should return an empty string when all values are falsy', (done) =\u003e {\r\n    const result = classnames(false, null, undefined, 0, NaN, '');\r\n    expect(result).to.equal('');\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 3,
            "description": "should handle conditional class names correctly",
            "test": "it('should handle conditional class names correctly', (done) =\u003e {\r\n    const isActive = true;\r\n    const isHidden = false;\r\n    const result = classnames('class1', isActive \u0026\u0026 'active', isHidden \u0026\u0026 'hidden');\r\n    expect(result).to.equal('class1 active');\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        },
        {
            "id": 4,
            "description": "should not include non-string truthy values",
            "test": "it('should not include non-string truthy values', (done) =\u003e {\r\n    const result = classnames('class1', 1, [], {}, true);\r\n    expect(result).to.equal('class1');\r\n    done();\r\n  });\r\n  ",
            "passed": null,
            "output": null,
            "console": null
        }
    ],
    "examples": [],
    "constraints": [
        {
            "constraint": "The function must accept any number of arguments."
        },
        {
            "constraint": "Each argument can be either a string representing a class name or an expression that evaluates to a truthy or falsy value, potentially including a string class name."
        },
        {
            "constraint": "Falsy arguments should be ignored, and not included in the output string. This includes `false`, `null`, `undefined`, `0`, `NaN`, and empty strings (`\"\"`)."
        },
        {
            "constraint": "Truthy arguments that are not strings (e.g., numbers, objects, arrays) should also be excluded from the output to ensure only valid CSS class names are included."
        },
        {
            "constraint": "The function should return a single string with class names separated by a single space, without leading or trailing spaces."
        },
        {
            "constraint": "The order of class names in the output string should match the order they were passed in as arguments."
        },
        {
            "constraint": "Performance should be considered, especially for use cases with a large number of class names or complex conditional expressions."
        }
    ],
    "order": null,
    "starterJSCode": "function classnames(...classes) {\r\n    // Write your code here\r\n}\r\n\r\n// Do not edit below this line\r\nexport default classnames;",
    "starterHTMLCode": null,
    "starterCSSCode": null,
    "solutionCode": "function classnames(...classes) {\r\n  // Use the spread operator '...' to gather all input arguments into an array called 'classes'\r\n  return classes\r\n    .filter(className =\u003e !!className \u0026\u0026 typeof className === 'string') // Updated filter condition\r\n    .join(' '); // Use the join method to concatenate all remaining class names into a single string, separated by spaces\r\n}",
    "starterFunctionName": null,
    "solution": "\u003carticle\u003e\n\u003csection\u003eThe \u003ccode\u003eclassnames\u003c/code\u003e utility function in JavaScript is a quintessential tool for dynamically managing CSS class names in web applications. It provides a streamlined way to construct a string of class names based on certain conditions, significantly enhancing the flexibility and maintainability of frontend code.\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eUnderstanding the Function\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eclassnames\u003c/code\u003e function is designed to accept an arbitrary number of arguments. Each argument can be either a string representing a class name or a boolean expression that determines whether a particular class name should be included in the output string.\u003c/p\u003e\n\u003cp\u003eThe magic of the function lies in its ability to filter out any falsy values from its arguments, ensuring that only meaningful class names are concatenated into the final string. This feature is particularly useful in scenarios where class names are conditionally applied based on the application\u0026#8217;s state.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eCore Implementation\u003c/h2\u003e\n\u003cp\u003eAt its core, the function uses the JavaScript \u003ccode\u003eArray.prototype.filter\u003c/code\u003e method to remove falsy values from the list of class names. Then, it employs the \u003ccode\u003eArray.prototype.join\u003c/code\u003e method to concatenate the remaining class names into a single string, with each class name separated by a space.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction classnames(...classes) {\r\n  return classes.filter(Boolean).join(' ');\r\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003ePractical Usage\u003c/h2\u003e\n\u003cp\u003eIn practical terms, the \u003ccode\u003eclassnames\u003c/code\u003e function shines when used to dynamically toggle class names based on the application\u0026#8217;s state. For example, a button might have different classes applied based on whether it is in an active state or disabled.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst buttonClass = classnames(\r\n  'button',\r\n  isActive \u0026amp;\u0026amp; 'button-active',\r\n  isDisabled \u0026amp;\u0026amp; 'button-disabled'\r\n);\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis approach allows developers to write cleaner and more declarative code, significantly simplifying the logic needed to dynamically assign class names.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eclassnames\u003c/code\u003e function is a powerful yet simple utility that greatly aids in managing dynamic class names in web applications. Its ability to elegantly handle conditional class names makes it an indispensable tool in the arsenal of modern frontend developers.\u003c/p\u003e\n\u003c/section\u003e\n\u003c/article\u003e\n",
    "category": [
        "Array"
    ],
    "likes": 0,
    "dislikes": null,
    "videoLink": "",
    "company": [
        "Facebook"
    ],
    "subtitle": null,
    "comingSoon": null,
    "seo": {
        "pageTitle": "7. ClassNames - Frontend Interview Question - FrontendLead",
        "pageDescription": "Learn how to create a dynamic classnames function in JavaScript to manage CSS classes efficiently. Perfect for making your frontend development cleaner and more maintainable.",
        "pageURL": "classnames",
        "isCodingPage": true,
        "useGeneralPageSD": false,
        "index": true,
        "ogImage": "",
        "twitterImage": "",
        "keywords": "",
        "secondaryStructuredData": {
            "@context": "http://schema.org",
            "@type": "Question",
            "name": "How to implement  ClassNames  Frontend Interview Question  FrontendLead in Javascript?",
            "text": "\u003cp\u003eThe \u003ccode\u003eclassnames\u003c/code\u003e utility function is a powerful tool in frontend development, used to dynamically construct a string of CSS class names based on certain conditions. This function simplif",
            "dateCreated": "2024-04-01",
            "author": {
                "@type": "Organization",
                "name": "FrontendLead"
            },
            "acceptedAnswer": {
                "@type": "Answer",
                "text": "\u003carticle\u003e\n\u003csection\u003eThe \u003ccode\u003eclassnames\u003c/code\u003e utility function in JavaScript is a quintessential tool for dynamically managing CSS class names in web applications. It provides a streamlined way to co",
                "dateCreated": "2024-04-01",
                "author": {
                    "@type": "Organization",
                    "name": "FrontendLead"
                }
            }
        }
    }
}
 large arrays.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003eIn conclusion, the choice between recursive and iterative approaches to array flattening depends on the specific requirements and constraints of your project, including the expected input array size and depth. While the recursive method is concise and elegant, the iterative method provides a robust alternative for handling large and deeply nested arrays without the risk of stack overflow.\u003c/section\u003e\n\u003c/article\u003e\n",
    "category": [
        "Array"
    ],
    "likes": 10,
    "dislikes": null,
    "videoLink": "https://www.youtube.com/embed/UV9Lp-3uwwg?si=sIkEur5qGudwyPgh",
    "company": [
        "Facebook",
        "Amazon",
        "Google",
        "Robinhood",
        "Zillow",
        "Airbnb",
        "OpenAI",
        "Microsoft",
        "Netflix"
    ],
    "subtitle": null,
    "comingSoon": null,
    "seo": {
        "pageTitle": "Flatten Array Frontend Interview: Recursive and Iterative Solutions - FrontendLead",
        "pageDescription": "Learn how to flatten multi-dimensional arrays in JavaScript for frontend interviews. Recursive and iterative solutions covered.",
        "pageURL": "flatten-arrays-recursively-and-iteratively",
        "isCodingPage": true,
        "useGeneralPageSD": false,
        "index": true,
        "ogImage": "",
        "twitterImage": "",
        "keywords": "",
        "secondaryStructuredData": {
            "@context": "http://schema.org",
            "@type": "Question",
            "name": "How to implement Flatten Array Frontend Interview Recursive and Iterative Solutions  FrontendLead in Javascript?",
            "text": "\u003cp\u003eWrite a function to flatten a multi-dimensional array into a single-level array. Provide both recursive and iterative solutions.\u003c/p\u003e\n\u003cp\u003eThe problem involves transforming an array that contains nest",
            "dateCreated": "2024-04-01",
            "author": {
                "@type": "Organization",
                "name": "FrontendLead"
            },
            "acceptedAnswer": {
                "@type": "Answer",
                "text": "\u003carticle\u003e\n\u003csection\u003eUnderstanding different approaches to flatten nested arrays in JavaScript is crucial for developers, especially when dealing with complex data structures. In this article, we explor",
                "dateCreated": "2024-04-01",
                "author": {
                    "@type": "Organization",
                    "name": "FrontendLead"
                }
            }
        }
    }
}
